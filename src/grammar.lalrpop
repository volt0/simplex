use std::rc::Rc;

use crate::definition::Definition;
use crate::expressions::{Constant, Expression, ExpressionRef};
use crate::function::FunctionArgument;
use crate::module::Module;
use crate::statements::{CompoundStatement, Statement};
use crate::types::{FloatType, IntegerSize, TypeSpec};

grammar;

// Module

pub Module: Module = {
    <defs:Definition*> => Module::new("__unknown__".into(), defs)
};

Definition: Definition = {
    <def:FunctionDefinition> => def,
};

// Functions

FunctionDefinition: Definition = {
    "fn" <name:Identifier> "(" <args:Comma<FunctionArgument>> ")" <return_type:TypeAnnotation?> <payload:FunctionPayload> => {
        Definition::define_function(name, args, return_type.unwrap_or(TypeSpec::Void), payload)
    }
};

FunctionArgument: Rc<FunctionArgument> = {
    <name:Identifier> <type_spec:TypeAnnotation> => FunctionArgument::new(name, type_spec)
}

FunctionPayload: Option<CompoundStatement> = {
    ";" => None,
    <body:CompoundStatement> => Some(body),
}

// Statements

Statement: Statement = {
    <items:CompoundStatement> => Statement::new_compound(items),
    "let" <var:VariableSignature> "=" <value:Expression> ";" => Statement::new_let(var.0, var.1, value),
    "var" <var:VariableSignature> "=" <value:Expression> ";" => Statement::new_var(),
    "if" <condition:Expression> <body:CompoundStatement> => Statement::new_if(),
    "while" <condition:Expression> <body:CompoundStatement> => Statement::new_while(),
    "for" "_" "=" <iterator:Expression> <body:CompoundStatement> => Statement::new_for(),
    "for" <var:VariableSignature> "=" <iterator:Expression> <body:CompoundStatement> => Statement::new_for(),
    "break" ";" => Statement::new_break(),
    "continue" ";" => Statement::new_continue(),
    "return" ";" => Statement::new_return(None),
    "return" <expression:Expression> ";" => Statement::new_return(Some(expression)),
    <expression:Expression> ";" => Statement::new_assign(),
}

CompoundStatement: CompoundStatement = {
    "{" <items:(<Statement>)*> "}" => CompoundStatement(items)
}

VariableSignature: (Rc<str>, Option<TypeSpec>) = {
    <name:Identifier> <type_spec:TypeAnnotation?> => (name, type_spec),
}

// Expressions

PrimaryExpression: ExpressionRef = {
    <name:Identifier> => Expression::new_identifier(name),
    <constant:Constant> => Expression::new_constant(constant),
    "(" <expression:Expression> ")" => expression,
}

PostfixExpression: ExpressionRef = {
    PrimaryExpression,
    <subject:PostfixExpression> "(" <args:Comma<Expression>> ")" => Expression::new_call(),
    <subject:PostfixExpression> "[" <expression:Expression> "]" => Expression::new_item_access(),
    <subject:PostfixExpression> "." <name:Identifier> => Expression::new_member_access(),
}

UnaryExpression: ExpressionRef = {
    PostfixExpression,
    "+" <subject:UnaryExpression> => Expression::new_prefix_plus(),
    "-" <subject:UnaryExpression> => Expression::new_prefix_minus(),
    "~" <subject:UnaryExpression> => Expression::new_bit_not(),
    "!" <subject:UnaryExpression> => Expression::new_logic_not(),
}

CastExpression: ExpressionRef = {
    UnaryExpression,
    <subject:CastExpression> "as" <typespec:TypeSpec> => Expression::new_cast(),
}

MultiplicativeExpression: ExpressionRef = {
    CastExpression,
    <a:MultiplicativeExpression> "*" <b:CastExpression> => Expression::new_mul(a, b),
    <a:MultiplicativeExpression> "/" <b:CastExpression> => Expression::new_div(a, b),
    <a:MultiplicativeExpression> "%" <b:CastExpression> => Expression::new_mod(a, b),
}

AdditiveExpression: ExpressionRef = {
    MultiplicativeExpression,
    <a:AdditiveExpression> "+" <b:MultiplicativeExpression> => Expression::new_add(a, b),
    <a:AdditiveExpression> "-" <b:MultiplicativeExpression> => Expression::new_sub(a, b),
}

ShiftExpression: ExpressionRef = {
    AdditiveExpression,
    <a:ShiftExpression> "<<" <b:AdditiveExpression> => Expression::new_shift_left(a, b),
    <a:ShiftExpression> ">>" <b:AdditiveExpression> => Expression::new_shift_right(a, b),
}

BitwiseAndExpression: ExpressionRef = {
    ShiftExpression,
    <a:BitwiseAndExpression> "&" <b:ShiftExpression> => Expression::new_bit_and(a, b),
}

BitwiseXorExpression: ExpressionRef = {
    BitwiseAndExpression,
    <a:BitwiseXorExpression> "^" <b:BitwiseAndExpression> => Expression::new_bit_xor(a, b),
}

BitwiseOrExpression: ExpressionRef = {
    BitwiseXorExpression,
    <a:BitwiseOrExpression> "|" <b:BitwiseXorExpression> => Expression::new_bit_or(a, b),
}

ComparisonExpression: ExpressionRef = {
    BitwiseOrExpression,
    <a:ComparisonExpression> "<" <b:BitwiseOrExpression> => Expression::new_lt(a, b),
    <a:ComparisonExpression> ">" <b:BitwiseOrExpression> => Expression::new_gt(a, b),
    <a:ComparisonExpression> "<=" <b:BitwiseOrExpression> => Expression::new_le(a, b),
    <a:ComparisonExpression> ">=" <b:BitwiseOrExpression> => Expression::new_ge(a, b),
    <a:ComparisonExpression> "==" <b:BitwiseOrExpression> => Expression::new_eq(a, b),
    <a:ComparisonExpression> "!=" <b:BitwiseOrExpression> => Expression::new_ne(a, b),
}

LogicalAndExpression: ExpressionRef = {
    ComparisonExpression,
    <a:LogicalAndExpression> "&&" <b:ComparisonExpression> => Expression::new_logic_and(a, b),
}

LogicalOrExpression: ExpressionRef = {
    LogicalAndExpression,
    <a:LogicalOrExpression> "||" <b:LogicalAndExpression> => Expression::new_logic_or(a, b),
}

Expression: ExpressionRef = {
    LogicalOrExpression,
    <condition:LogicalOrExpression> "?" <case_a:Expression> ":" <case_b:Expression> => Expression::new_inline_if(),
}

// Types

TypeAnnotation: TypeSpec = {
    ":" <type_spec:TypeSpec> => type_spec
}

TypeSpec: TypeSpec = {
    "byte" => TypeSpec::new_integer(IntegerSize::Byte),
    "short" => TypeSpec::new_integer(IntegerSize::Short),
    "int" => TypeSpec::new_integer(IntegerSize::Int),
    "long" => TypeSpec::new_integer(IntegerSize::Long),
    "ubyte" => TypeSpec::new_unsigned_integer(IntegerSize::Byte),
    "ushort" => TypeSpec::new_unsigned_integer(IntegerSize::Short),
    "uint" => TypeSpec::new_unsigned_integer(IntegerSize::Int),
    "ulong" => TypeSpec::new_unsigned_integer(IntegerSize::Long),
    "float" => TypeSpec::Float(FloatType::Float),
    "double" => TypeSpec::Float(FloatType::Double),
    "bool" => TypeSpec::Boolean,
    "void" => TypeSpec::Void,
    <name:Identifier> => TypeSpec::new_identifier(name),
}

// Syntax base

Identifier: Rc<str> = <s:r"[_A-Za-z][_0-9A-Za-z]*"> => s.into();

Constant: Constant = {
    <value:IntegerConstant> => Constant::Integer(value),
    <value:RealConstant> => Constant::Float(FloatType::Double, value),
    <value:StringConstant> => Constant::String(value),
    "true" => Constant::True,
    "false" => Constant::False,
    "void" => Constant::Void,
}

IntegerConstant: i32 = <s:r"[0-9]+"> => s.parse::<i32>().unwrap();
RealConstant: f64 = <s:r#"[0-9]+"."[0-9]*([Ee][+-]?[0-9]+)?[fFlL]?"#> => s.parse::<f64>().unwrap();
StringConstant: Rc<str> = <s:r#""(\\.|[^\\"])*""#> => s.into();

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
