use std::rc::Rc;

use crate::ast::*;

grammar;

// Module

pub Module: Module = {
    <defs:Definition*> => Module{ defs }
};

Definition: Definition = {
    <def:FunctionDefinition> => def,
};

// Functions

FunctionDefinition: Definition = {
    "function" <name:Identifier> <signature:FunctionSignature> <payload:FunctionPayload> => Definition {
        name,
        value: DefinitionImpl::Function(Function { signature, payload }),
    }
};

FunctionSignature: FunctionSignature = {
    "(" <args:Comma<FunctionArgument>> ")" <return_type:TypeAnnotation?> => FunctionSignature {
        args, return_type
    }
}

FunctionArgument: FunctionArgument = {
    <name:Identifier> <type_spec:TypeAnnotation> => FunctionArgument { name, type_spec }
}

FunctionPayload: Option<CompoundStatement> = {
    ";" => None,
    <body:CompoundStatement> => Some(body),
}

// Statements

Statement: Statement = {
    <items:CompoundStatement> => Statement::Compound(items),
    "let" <var:VariableSignature> "=" <value:Expression> ";" => Statement::Let(
         Rc::new(Variable { name: var.0, value_type: var.1, init: Some(value) })
    ),
    "var" <var:VariableSignature> "=" <value:Expression> ";" => Statement::Var(
         Rc::new(Variable { name: var.0, value_type: var.1, init: Some(value) })
    ),
    "if" <cond:Expression> <body:CompoundStatement> => Statement::If(cond, body),
    "while" <cond:Expression> <body:CompoundStatement> => Statement::While(cond, body),
    "for" "_" "=" <iterator:Expression> <body:CompoundStatement> => Statement::For(None, iterator, body),
    "for" <var:VariableSignature> "=" <iterator:Expression> <body:CompoundStatement> => Statement::For(
        Some(Rc::new(Variable { name: var.0, value_type: var.1, init: None })),
        iterator,
        body
    ),
    "break" ";" => Statement::Break,
    "continue" ";" => Statement::Continue,
    "return" ";" => Statement::Return(None),
    "return" <expression:Expression> ";" => Statement::Return(Some(expression)),
    <expression:Expression> ";" => Statement::Expression(expression),
}

CompoundStatement: CompoundStatement = {
    "{" <items:(<Statement>)*> "}" => CompoundStatement(items)
}

VariableSignature: (Rc<str>, Option<TypeSpec>) = {
    <name:Identifier> <type_spec:TypeAnnotation?> => (name, type_spec),
}

// Expressions

PrimaryExpression: ExpressionRef = {
    <name:Identifier> => Box::new(Expression::Identifier(name)),
    <constant:Constant> => Box::new(Expression::Constant(constant)),
    "(" <expression:Expression> ")" => expression,
}

PostfixExpression: ExpressionRef = {
    PrimaryExpression,
    <val:PostfixExpression> "(" <args:Comma<Expression>> ")" => Box::new(Expression::Call(
        CallExpression(val, args)
    )),
    <val:PostfixExpression> "[" <expression:Expression> "]" => Box::new(Expression::ItemAccess(
        ItemAccessExpression(val, expression))
    ),
    <val:PostfixExpression> "." <name:Identifier> => Box::new(Expression::MemberAccess(
        MemberAccessExpression(val, name))
    ),
}

UnaryExpression: ExpressionRef = {
    PostfixExpression,
    "+" <val:UnaryExpression> => Box::new(Expression::UnaryOperation(
        UnaryOperationExpression { operation: UnaryOperation::Plus, val })
    ),
    "-" <val:UnaryExpression> => Box::new(Expression::UnaryOperation(
        UnaryOperationExpression { operation: UnaryOperation::Minus, val })
    ),
    "~" <val:UnaryExpression> => Box::new(Expression::UnaryOperation(
        UnaryOperationExpression { operation: UnaryOperation::BitNot, val })
    ),
    "!" <val:UnaryExpression> => Box::new(Expression::UnaryOperation(
        UnaryOperationExpression { operation: UnaryOperation::LogicalNot, val })
    ),
}

CastExpression: ExpressionRef = {
    UnaryExpression,
    <val:CastExpression> "as" <type_spec:TypeSpec> => Box::new(Expression::Cast(
        CastExpression(val, type_spec)
    )),
}

MultiplicativeExpression: ExpressionRef = {
    CastExpression,
    <a:MultiplicativeExpression> "*" <b:CastExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::Mul, a, b }
    )),
    <a:MultiplicativeExpression> "/" <b:CastExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::Div, a, b }
    )),
    <a:MultiplicativeExpression> "%" <b:CastExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::Mod, a, b }
    )),
}

AdditiveExpression: ExpressionRef = {
    MultiplicativeExpression,
    <a:AdditiveExpression> "+" <b:MultiplicativeExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::Add, a, b }
    )),
    <a:AdditiveExpression> "-" <b:MultiplicativeExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::Sub, a, b }
    )),
}

ShiftExpression: ExpressionRef = {
    AdditiveExpression,
    <a:ShiftExpression> "<<" <b:AdditiveExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::ShiftLeft, a, b }
    )),
    <a:ShiftExpression> ">>" <b:AdditiveExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::ShiftRight, a, b }
    )),
}

BitwiseAndExpression: ExpressionRef = {
    ShiftExpression,
    <a:BitwiseAndExpression> "&" <b:ShiftExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::BitAnd, a, b }
    )),
}

BitwiseXorExpression: ExpressionRef = {
    BitwiseAndExpression,
    <a:BitwiseXorExpression> "^" <b:BitwiseAndExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::BitXor, a, b }
    )),
}

BitwiseOrExpression: ExpressionRef = {
    BitwiseXorExpression,
    <a:BitwiseOrExpression> "|" <b:BitwiseXorExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::BitOr, a, b }
    )),
}

ComparisonExpression: ExpressionRef = {
    BitwiseOrExpression,
    <a:ComparisonExpression> "<" <b:BitwiseOrExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::Lt, a, b }
    )),
    <a:ComparisonExpression> ">" <b:BitwiseOrExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::Gt, a, b }
    )),
    <a:ComparisonExpression> "<=" <b:BitwiseOrExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::Le, a, b }
    )),
    <a:ComparisonExpression> ">=" <b:BitwiseOrExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::Ge, a, b }
    )),
    <a:ComparisonExpression> "==" <b:BitwiseOrExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::Eq, a, b }
    )),
    <a:ComparisonExpression> "!=" <b:BitwiseOrExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::Ne, a, b }
    )),
}

LogicalAndExpression: ExpressionRef = {
    ComparisonExpression,
    <a:LogicalAndExpression> "&&" <b:ComparisonExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::LogicalAnd, a, b }
    )),
}

LogicalOrExpression: ExpressionRef = {
    LogicalAndExpression,
    <a:LogicalOrExpression> "||" <b:LogicalAndExpression> => Box::new(Expression::BinaryOperation(
        BinaryOperationExpr { operation: BinaryOperation::LogicalOr, a, b }
    )),
}

Expression: ExpressionRef = {
    LogicalOrExpression,
    <condition:LogicalOrExpression> "?" <case_a:Expression> ":" <case_b:Expression> => Box::new(Expression::Conditional(
        ConditionalExpression(condition, case_a, case_b)
    )),
}

// Types

TypeAnnotation: TypeSpec = {
    ":" <type_spec:TypeSpec> => type_spec
}

TypeSpec: TypeSpec = {
    "i8" => TypeSpec::Integer(IntegerType::I8),
    "i16" => TypeSpec::Integer(IntegerType::I16),
    "i32" => TypeSpec::Integer(IntegerType::I32),
    "i64" => TypeSpec::Integer(IntegerType::I64),
    "u8" => TypeSpec::Integer(IntegerType::U8),
    "u16" => TypeSpec::Integer(IntegerType::U16),
    "u32" => TypeSpec::Integer(IntegerType::U32),
    "u64" => TypeSpec::Integer(IntegerType::U64),
    "f32" => TypeSpec::Float(FloatType::F32),
    "f64" => TypeSpec::Float(FloatType::F64),
    "bool" => TypeSpec::Boolean,
    "void" => TypeSpec::Void,
    <name:Identifier> => TypeSpec::Identifier(name),
}

// Syntax base

Identifier: Rc<str> = <s:r"[_A-Za-z][_0-9A-Za-z]*"> => s.into();

Constant: Constant = {
    <value:IntegerConstant> => Constant::Integer(value),
    <value:RealConstant> => Constant::Float(value),
    <value:StringConstant> => Constant::String(value),
    "true" => Constant::True,
    "false" => Constant::False,
    "void" => Constant::Void,
}

IntegerConstant: i32 = <s:r"[0-9]+"> => s.parse::<i32>().unwrap();
RealConstant: f64 = <s:r#"[0-9]+"."[0-9]*([Ee][+-]?[0-9]+)?[fFlL]?"#> => s.parse::<f64>().unwrap();
StringConstant: Rc<str> = <s:r#""(\\.|[^\\"])*""#> => s.into();

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
